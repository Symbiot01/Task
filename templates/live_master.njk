{% extends "_base.njk" %}

{% set thispage = 'live' %}
{% set pagetitle = 'Live Quiz' %}

{% block pagecontent %}
	<div class="quiz-container">
		<div class="countDown">
			<div id="count"></div>
			<br/><br/>
		</div>
		<br/>
		<div class="button-container">
			<button onclick="prevQ()" class="rel prevQ">Prev</button>
			<button onclick="startQ()" class="rel startQ">Start</button>
			<button onclick="nextQ()" class="rel nextQ">Next</button>
		</div>
		<br/>
		<div class="question-zone">
			<br/>
			<form id="quiz" class="quizzes">
				<input type="hidden" name="quizId" value="{{ id }}"/>
				{% for q in range(1, qAmt + 1) %}
					<div id="qbox-{{ q }}" style="display:none">
						<div id="question-{{ q }}"></div>
						<br/>
					</div>
				{% endfor %}
			</form>
		</div>
		<br/><br/><br/>
	</div>
	<br/><br/>
{% endblock %}


{% block customcss %}
	<link rel="stylesheet" type="text/css" href="/assets/styles/icons.css"/>
	<style>
		.quiz-container {
			width: 80%;
			margin: auto;
		}
		button.rel {
			width: 100px;
			height: 30px;
			background-color: var(--gray);
			color: var(--off-white);
			border: 2px solid var(--ghost-gray);
			border-radius: 5px;
			cursor: pointer;
		}
		button.rel:disabled {
			background-color: var(--tinted-gray);
			border: 1px solid var(--gray);
			color: var(--ghost-gray);
			cursor: default;
		}
		button.rel:not(:disabled):hover {
			background-color: var(--middle-gray);
		}
		h3 {
			margin: 10px;
		}
		.option {
			margin: 8px;
		}
		.option-image {
			margin: 10px;
		}
		.question-zone {
			border-radius: 10px;
			background: rgba(0, 0, 0, 0.5);
			padding: 25px;
		}
		button.start {}
	</style>
{% endblock %}

{% block customjs %}
	<script>
		let currentQ = 0;
		let countLeftPerQs = 30;
		let currentTimer;
		const qAmt = {{ qAmt }};
		const qs = {{ questions | safe }};
		function generateHTML (components) {
			return components.map(component => {
				switch (component.type) {
					case 'image': return `<img src="${component.val}" class="option-image" style="${component.style || ''}"/>`;
					case 'mp3': return `<audio src="${component.val}" type="audio/mpeg"> </audio>`;
					case 'title': return `<h3>${component.val}</h3>`;
					default: return component.val;
				}
			}).join('<br/>');
		}
		window.onload = () => {
			qs.forEach((question, q) => {
				document.getElementById(`question-${q + 1}`).innerHTML = generateHTML(question);
			});
			document.getElementById('qbox-1').style.display = 'block';
		}
		function timer () {
			// timer code ;-;
		}
		function nextQ () {
			document.getElementById(`qbox-${currentQ + 1}`).style.display = "none";
			if (currentQ < qAmt-1) currentQ++;
			document.getElementById(`qbox-${currentQ + 1}`).style.display = "block";
		}
		function startQ () {
			// Starts the timer (or will it send a signal for the others to start their timers?)
		}
		function prevQ () {
			document.getElementById(`qbox-${currentQ + 1}`).style.display = "none";
			if (currentQ) currentQ--;
			document.getElementById(`qbox-${currentQ + 1}`).style.display = "block";
		}
	</script>
{% endblock %}

{% set scripts = ['https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'] %}
