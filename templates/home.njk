{% set thispage = 'home' %}
{% extends "_base.njk" %}

{% set scripts = ['https://www.youtube.com/iframe_api'] %}

{% block pagecontent %}
	<div class="mask-banner">
		<img class="mask-banner-image" src="/assets/logo.jpeg"/>
	</div>
	<div class="flex-container">
		<div class="notices"><div class="noticebox">
			<div class="notices-header">Updates!</div>
			<div class="notices-list">
				{% for post in posts %}
					<a href="{{ post.link }}" target="{{ post.page }}" class="notice-link" title="{{ post.date }}"><div class="notice-post">{{ post.name }}{{ ('<sup>NEW</sup>' | safe) if post.recent }}</div></a>{% if not loop.last %}<hr class="notice-break"/>{% endif %}
				{% endfor %}
			</div>
		</div></div>
		<div class="about-stuff">
			<h1>Welcome to the MASK website!</h1>
			<div class="text" style="font-size:1.1em;">
				The Manga & Anime Society, Kharagpur (MASK) is a group of otakus - manga and anime enthusiasts - engaging in art creation, AMV production, event organization, and music performances.
			</div>
		</div>
	</div>
	<hr class="flex-break"/>
	<div class="flex-container" id="bottom-container">
		<div class="top-container">
			<div class="with-controls">
				<div class="imgshow-container">
					<div class="imgshow">
						{% for img in art %}
							<div id="img-{{ loop.index }}" class="to-frost"><div class="full-image" style="background-image: url(/assets/art/{{ img.link }});"></div></div>
						{% endfor %}
					</div>
					<div class="slide-buttons">
						<div class="prevbtn" id="img-prev">&#10094;</div>
						<div class="nextbtn" id="img-next">&#10095;</div>
					</div>
				</div>
				<span class="slider" id="slider-img">
					{% for img in art %}
						<a id="imgref-{{ loop.index }}"></a>
					{% endfor %}
				</span>
				<script>
					const imgSliders = document.querySelectorAll('#slider-img > a'), imgSlides = document.querySelectorAll(".imgshow > div");
					let imageTimer;
					let scrolledOutImg = true;
					const IMAGE_TIME = 5000;
					const imgAmt = {{ art | length }};
					function imageSlide (prev, clicked) {
						const currentIndex = [...imgSliders].findIndex(dot => dot.classList.contains('active-image-link'));
						let nextIndex = currentIndex + (prev ? -1 : 1);
						nextIndex = (nextIndex + imgAmt) % imgAmt;
						imgSlides[nextIndex].scrollIntoView({ behaviour: 'smooth', block: 'nearest' });
						clearTimeout(imageTimer);
						if (!clicked) imageTimer = setTimeout(imageSlide, IMAGE_TIME);
					}
					imgSliders.forEach(a => a.addEventListener('click', () => {
						clearTimeout(imageTimer);
						const target = imgSlides[a.id.substr(7) - 1];
						target.scrollIntoView({ behaviour: 'smooth', block: 'nearest' });
						imageTimer = setTimeout(imageSlide, IMAGE_TIME);
					}));
					const pauseImages = () => {
						clearTimeout(imageTimer);
					}, resumeImages = () => {
						clearTimeout(imageTimer);
						imageTimer = setTimeout(imageSlide, IMAGE_TIME);
					};
					document.getElementById('img-prev').addEventListener('mouseenter', pauseImages);
					document.getElementById('img-prev').addEventListener('mouseleave', resumeImages);
					document.getElementById('img-prev').addEventListener('click', () => {
						imageSlide(true, true);
					});
					document.getElementById('img-next').addEventListener('mouseenter', pauseImages);
					document.getElementById('img-next').addEventListener('mouseleave', resumeImages);
					document.getElementById('img-next').addEventListener('click', () => {
						imageSlide(false, true);
					});
					const imageObserver = new IntersectionObserver(imgSlides => {
						imgSlides.forEach(slide => {
							if (slide.isIntersecting && slide.intersectionRatio > 0.2) return imgSliders[slide.target.id.substr(4) - 1].classList.add('active-image-link');
							else imgSliders[slide.target.id.substr(4) - 1].classList.remove('active-image-link');
						});
					}, { threshold: [0.4] });
					imgSlides.forEach(slide => imageObserver.observe(slide));
					new IntersectionObserver(([imgShow]) => {
						if (imgShow.isIntersecting && imgShow.intersectionRatio > 0.2) {
							if (scrolledOutImg) {
								scrolledOutImg = false;
								resumeImages();
								console.log('Rejoined images');
							}
						} else {
							pauseImages();
							scrolledOutImg = true;
							console.log('Left images');
						}
					}, { threshold: [0.45] }).observe(document.querySelector('.imgshow'));
					resumeImages();
				</script>
				<style>
					.with-controls {
						width: 100%;
						max-width: 700px;
						padding-bottom: 15px;
						margin-bottom: 30px;
					}
					.imgshow-container, .vidshow-container {
						overflow: hidden;
						height: 500px;
						max-height: 50vh;
						width: 100%;
						border: 2px solid var(--gray);
						border-radius: 10px;
						display: block;
						margin-bottom: 10px;
						position: relative;
					}
					.imgshow, .vidshow {
						display: flex;
						overflow-x: auto;
						scroll-snap-type: x mandatory;
						scroll-behavior: smooth;
						-webkit-overflow-scrolling: touch;
						height: 100%;
						width: 100%;
						-ms-overflow-style: none;
						scrollbar-width: none;
					}
					.imgshow::-webkit-scrollbar {
						display: none;
					}
					.imgshow > div, .vidshow > div {
						scroll-snap-align: start;
						flex-shrink: 0;
						width: 100%;
						height: 100%;
						margin-right: 50px;
						border-radius: 10px;
						transform-origin: center center;
						transform: scale(1);
						transition: transform 0.8s;
						position: relative;
						display: flex;
						justify-content: center;
						align-items: center;
						font-size: 100px;
						overflow: hidden;
					}
					.to-frost::before {
						content: "";
						position: absolute;
						top: -100px;
						left: -100px;
						right: -100px;
						bottom: -100px;
						background-repeat: no-repeat;
						background-attachment: fixed;
						background-size: cover;
						background-position: top;
						filter: blur(10px);
						z-index: -1;
					}
					{% for img in art %}
						#img-{{ loop.index }}::before {
							background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(/assets/art/{{ img.link }});
						}
					{% endfor %}
					.full-image {
						background-position: center;
						background-size: contain;
						background-repeat: no-repeat;
						height: 90%;
						width: 90%;
					}
					.slider {
						margin: 20px 0px;
					}
					.slider > a {
						display: inline-flex;
						height: 1rem;
						width: 1rem;
						border-radius: 50%;
						margin-left: 0.4rem;
						background-color: var(--ghost-gray);
						content: "";
						z-index: 1;
						cursor: pointer;
					}
					.active-image-link, .active-video-link {
						background-color: var(--off-white) !important;
					}
					.slide-buttons {
						display: flex;
						justify-content: space-between;
						align-items: center;
						width: 70vw;
						height: 20%;
						z-index: 2;
						float: left;
						width: 100%;
						position: absolute;
						top: 40%;
						pointer-events: none;
					}
					.slide-buttons > div {
						color: var(--off-white);
						padding: 10px;
						font-weight: bold;
						font-size: 2em;
						cursor: pointer;
						background-color: rgba(0, 0, 0, 0.3);
						width: 30px;
						height: 30px;
						border-radius: 5px;
						line-height: 30px;
						pointer-events: auto;
					}
					.prevbtn:hover, .nextbtn:hover {
						color: var(--white);
						background-color: rgba(0, 0, 0, 0.7);
					}
					@supports (scroll-snap-type) {
						.slider > a {
							display: none;
						}
					}
				</style>
			</div>
			<div class="submit-stuff"><a href="/submissions"><button class="submit-button">Submit your content!</button></a></div>
		</div>
		<div class="with-controls" id="vid-main">
			<div class="vidshow-container">
				<div class="vidshow">
					{% for vid in vids %}
						<div id="vid-{{ loop.index }}"><div id="vidframe-{{ loop.index }}">{{ vid.show | safe }}</div></div>
					{% endfor %}
				</div>
				<script>
					const inputVids = [{% for vid in vids %}'{{ vid.link }}'{{ ',' if not loop.last }}{% endfor %}].map(vid => vid.split('?v=')[1]);
					let players = [];
				</script>
				<div class="slide-buttons">
					<div class="prevbtn" id="vid-prev">&#10094;</div>
					<div class="nextbtn" id="vid-next">&#10095;</div>
				</div>
			</div>
			<div class="slider" id="slider-vid">
				{% for vid in vids %}
					<a id="vidref-{{ loop.index }}"></a>
				{% endfor %}
			</div>
			<script>
				const vidSliders = document.querySelectorAll('#slider-vid > a'), vidSlides = document.querySelectorAll(".vidshow > div");
				let videoTimer, scrolledOutVid = true, playedVid = false;
				const VIDEO_TIME = 7000;
				const vidAmt = {{ vids | length }};
				function videoSlide (prev, auto) {
					const currentIndex = [...vidSliders].findIndex(dot => dot.classList.contains('active-video-link'));
					let nextIndex = currentIndex + (prev ? -1 : 1);
					nextIndex = (nextIndex + vidAmt) % vidAmt;
					vidSlides[nextIndex].scrollIntoView({ behaviour: 'smooth', block: 'nearest' });
					clearTimeout(videoTimer);
					if (auto) videoTimer = setTimeout(videoSlide, VIDEO_TIME, false, auto);
				}
				vidSliders.forEach(a => a.addEventListener('click', () => {
					clearTimeout(videoTimer);
					const target = vidSlides[a.id.substr(7) - 1];
					target.scrollIntoView({ behaviour: 'smooth', block: 'nearest' });
				}));
				document.getElementById('vid-prev').addEventListener('click', () => {
					clearTimeout(videoTimer);
					videoSlide(true);
				});
				document.getElementById('vid-next').addEventListener('click', () => {
					clearTimeout(videoTimer);
					videoSlide(false);
				});
				const videoObserver = new IntersectionObserver(vidSlides => {
					vidSlides.forEach(slide => {
						try {
							if (slide.isIntersecting && slide.intersectionRatio > 0.2) return vidSliders[slide.target.id.substr(4) - 1].classList.add('active-video-link');
							else vidSliders[slide.target.id.substr(4) - 1].classList.remove('active-video-link');
						} catch (e) {
							console.log(e, slide);
						}
					});
				}, { threshold: [0.4] });
				new IntersectionObserver(([vidShow]) => {
					if (playedVid) return console.log(this);
					if (vidShow.isIntersecting && vidShow.intersectionRatio > 0.2) {
						if (scrolledOutVid) {
							scrolledOutVid = false;
							clearTimeout(videoTimer);
							videoSlide(false, true);
							console.log('Rejoined videos');
						}
					} else {
						clearTimeout(videoTimer);
						scrolledOutVid = true;
						console.log('Left videos');
					}
				}, { threshold: [0.45] }).observe(document.querySelector('.vidshow'));
				vidSlides.forEach(slide => videoObserver.observe(slide));
				videoSlide(false, true);
			</script>
			<script>
				function onYouTubeIframeAPIReady() {
					players = inputVids.map((vid, j) => {
						new YT.Player(`vidframe-${j + 1}`, {
							height: '100%',
							width: '100%',
							videoId: vid,
							playerVars: {
								'playsinline': 1
							},
							events: {
								'onStateChange': function (event) {
									if (event.data === YT.PlayerState.PLAYING) {
										playedVid = true;
										clearTimeout(videoTimer);
									}
								}
							}
						});
					});
				}
			</script>
			<style>
				#vid-main {
					width: 100%;
					max-width: 800px;
					margin: auto;
				}
				.vidshow-container {
					max-height: 60vh;
					max-width: 90%;
					margin: auto;
				}
				.vidshow::-webkit-scrollbar {
					display: none;
				}
				.active-video-link {
					background-color: var(--off-white) !important;
				}
				#vid-prev, #vid-next {
					background-color: rgba(0, 0, 0, 0.7);
					color: var(--white);
				}
				#vid-prev:hover, #vid-next:hover {
					background-color: red;
				}
			</style>
		</div>
	</div>
{% endblock %}

{% block customcss %}
	<style>
		.text {
			text-align: justify;
			max-width: 700px;
		}
		.mask-banner {
			width: 80%;
			background: var(--red);
			text-align: center;
			margin: 20px auto;
			border-radius: 30px;
		}
		.mask-banner-image {
			width: 120px;
			height: 120px;
		}
		.flex-container {
			display: inline-flex;
			justify-content: center;
			padding-top: 30px;
		}
		#bottom-container {
			width: 100%;
			justify-content: space-evenly;
			flex-direction: column;
			padding-top: 0;
		}
		.notices {
			display: flex;
			margin: 30px 40px 30px 40px;
			box-sizing: border-box;
		}
		.noticebox {
			margin-top: 20px;
			border-radius: 5px;
			border: 1px solid var(--ghost-gray);
			align-self: center;
			width: 200px;
			overflow: hidden;
		}
		.notices-header {
			background-color: var(--red);
			padding: 5px;
			color: var(--white);
			font-weight: bold;
			font-size: 1.2em;
		}
		.notices-list {
			max-height: 150px;
			overflow-y: auto;
			-ms-overflow-style: none;
			scrollbar-width: none;
		}
		.notices-list::-webkit-scrollbar {
			display: none;
		}
		.notice-post {
			transition: 0.4s;
			padding: 4px;
			background-color: var(--tinted-gray);
			color: var(--white);
		}
		.notice-post:hover {
			background-color: var(--medium-gray);
			color: var(--white);
		}
		.notice-link sup {
			font-size: 0.6em;
			margin-left: 5px;
			font-weight: bold;
			color: var(--error-red);
		}
		.notice-link {
			text-decoration: none;
			color: inherit;
		}
		.notice-break {
			width: 60%;
			color: var(--medium-gray);
			margin: 0px auto;
		}
		.about-stuff {
			padding-right: 10%;
		}
		h1 {
			font-size: 2.5em;
		}
		.text {
			text-justify: justify;
		}
		.flex-break {
			width: 80%;
			margin: 30px auto;
			color: var(--medium-gray);
		}
		.top-container {
			display: inline-flex;
			padding-bottom: 40px;
			flex-wrap: wrap;
			width: 70vw;
			margin: 0 auto;
		}
		.vidshow {
			border: 1px solid var(--off-white);
			border-radius: 5px;
			margin: 40px auto;
			width: 70vw;
			height: 37vw;
			background-color: var(--medium-gray);
			margin: auto;
			margin-bottom: 50px;
		}
		.submit-stuff {
			margin:0 auto;
			display: flex;
			align-items: center;
			z-index: 29;
		}
		.submit-button {
			border: 2px solid var(--off-white);
			border-radius: 9px;
			background: var(--tinted-gray);
			padding: 20px;
			color: var(--white);
			transition: 0.4s;
			cursor: pointer;
			width: 180px;
			height: 80px;
			font-size: 1.1em;
		}
		.submit-button:hover {
			background-color: var(--middle-gray);
		}
		@media (max-width: 800px) {
			.flex-container {
				flex-direction: column-reverse;
			}
			.notices, .vidshow {
				margin: 30px auto;
			}
			.text {
				padding: 30px;
			}
		}
		@media (max-width: 600px) {
			.about-stuff {
				padding-right: 0;
			}
			.vidshow-container {
				height: 200px;
			}
		}
	</style>
{% endblock %}
