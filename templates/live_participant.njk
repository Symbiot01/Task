{% extends "_base.njk" %}

{% set thispage = 'live' %}
{% set pagetitle = 'Live Quiz' %}

{% block pagecontent %}
	<div class="quiz-container">
		<div class="countDown">
			<br/><div id="count"></div><br/>
		</div>
		<br/>
		<div class="question-zone">
			<br/>
			<form id="quiz" class="quizzes" method="POST" action="javascript: ()=> console.log('Submitting')">
				<input type="hidden" name="_csrf" value="{{ csrfToken }}"/>
				<input type="hidden" name="quizId" value="{{ id }}"/>
				<div id="q-box" style="display: none">
					<!--<div id="question" style="display: none">Question div</div>-->
					<br/>
					<div id="options-container" style="display: none">
						{% for i in range(1, 5) %}
							<div class="option">
								<input type="radio" id="answer-{{ i }}" name="answer" value="{{ i }}"/>
								<label id="option-{{ i }}" for="answer-{{ i }}">Option {{ i }}</label><br/>
							</div>
						{% endfor %}
					</div>
					<div id="answer-text-container" style="display: none">
						<input type="text" name="answer" id='answer-text-field'>
					</div>
					<br/>
					<button id="submit-button" class="rel" onclick="submitAnswer()">Submit</button>
				</div>
				<div id = "message" style="display: none"><h3>Waiting for the quizmaster ;-;</h3></div>
			</form>
		</div>
		<br/><br/><br/>
		<button onclick="nextQ()" style="" class="rel nextQ">Next</button>
	</div>
	<br/><br/>
{% endblock %}


{% block customcss %}
	<link rel="stylesheet" type="text/css" href="/assets/styles/icons.css"/>
	<style>
		.quiz-container {
			width: 80%;
			margin: auto;
		}
		button.rel {
			width: 100px;
			height: 30px;
			background-color: var(--gray);
			color: var(--off-white);
			border: 2px solid var(--ghost-gray);
			border-radius: 5px;
			cursor: pointer;
		}
		button.rel:disabled {
			background-color: var(--tinted-gray);
			border: 1px solid var(--gray);
			color: var(--ghost-gray);
			cursor: default;
		}
		button.rel:not(:disabled):hover {
			background-color: var(--middle-gray);
		}
		h3 {
			margin: 10px;
		}
		.option {
			margin: 8px;
		}
		.option-image {
			margin: 10px;
		}
		.question-zone {
			border-radius: 10px;
			background: rgba(0, 0, 0, 0.5);
			padding: 25px;
		}
	</style>
{% endblock %}

{% block customjs %}
	<script>

		const userId = '{{ userId }}';
		const socket = io({
			query: `userId=${userId}`
		});

		let currentQ = 0;
		let state = "waiting";
		let timeLeft = 0;
		
		function generateHTML(components) {
			return components.map(component => {
				switch (component.type) {
					case 'image': return `<img src="${component.val}" class="option-image" style="${component.style || ''}"/>`;
					case 'mp3': return `<audio src="${component.val}" type="audio/mpeg"> </audio>`;
					case 'title': return `<h3>${component.val}</h3>`;
					default: return component.val;
				}
			}).join('<br/>');
		}

		function showMessage (message) {
			document.getElementById('q-box').style.display = 'none';
			document.getElementById('message').style.display = 'block';
			document.getElementById('message').innerHTML = message;
		}
		
		function timer(time) {
			timeLeft = time;
			function tick() {
				if (state === 'waiting' || state === 'submitted') return;
				document.getElementById('count').innerHTML = timeLeft--;
				if (timeLeft >= 0) setTimeout(tick, 1000);
				else {
					console.log("Done");
					switch (state) {
						case 'running': {
							state = 'time-out';
							submitAnswer();
							showMessage('The time is up. Your response is submitted.');
							timer(5);
							break;
						}
						// any other case as per requirement will be added here
						default: {
							state = 'waiting';
							document.getElementById('count').innerHTML = "";
							showMessage('Waiting for the quizmaster ;-;');
							break;
						}
					}
				}
			}
			tick();
		}

		function showQuestion(options) {
			document.getElementById('count').style.display = 'block';
			document.getElementById('message').style.display = 'none';
			document.getElementById('q-box').style.display = 'block';
			if (options.type === "mcq") {
				for (let i=1; i<=4; i++) document.getElementById(`option-${i}`).innerHTML = generateHTML(options.value[i-1]);
				document.getElementById('answer-text-container').style.display = 'none';
				document.getElementById('options-container').style.display = 'block';
			} else {
				document.getElementById('answer-text-container').style.display = 'block';
				document.getElementById('options-container').style.display = 'none';
			}
			state = "running";
			timer(30);
		}

		socket.on('question', options => showQuestion(options));
		socket.on('answer', ans => showAnswer(ans)); // TODO: add this

		window.onload = () => showMessage('Waiting for the quizmaster ;-;');

		function submitAnswer (timeout=false) {
			// needs fixing
			let answer;
			if (document.getElementById('answer-text-container').style.display === "block") {
				answer = document.getElementById('answer-text-field').value;
			} else {
				for (let i=1; i<=4; i++) {
					if (document.getElementById(`answer-${i}`).checked) { 
						document.getElementById(`answer-${i}`).checked = false;
						answer = document.getElementById(`answer-${i}`).value;
						break;

					}
				}
			}
			console.log(answer);
			document.getElementById('count').style.display = "none";
			if (timeout) return;
			state = "submitted";
			showMessage("Your response is submitted.");
			setTimeout(() => showMessage("Waiting for the quizmaster ;-;"), 5000);
			// Now, 
		}
	</script>
{% endblock %}

{% set scripts = ['https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js', '/socket.io/socket.io.js'] %}
