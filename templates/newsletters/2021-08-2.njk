{% extends "_newsletter.njk" %}

{% set pagetitle = 'August - Issue 1' %}

{% block article %}
	<div class="page" id="crossword">
		<table id="crossword-table" cellspacing="0"></table>
		<div id="crossword-words"></div>
	</div>
{% endblock %}

{% block customcss %}
	<style>
		.page {
			background-color: var(--off-white);
			margin: 20px auto;
			padding: 20px;
			width: 420px;
			height: 594px;
			border-radius: 5px;
			color: var(--abyss);
		}
		#crossword-table {
			margin: 0px auto 20px;
			text-align: center;
			background-color: var(--white);
			border-radius: 5px;
		}
		.crosswordCellH {
			background-color: var(--light-gray);
		}
		.crosswordCellS {
			background-color: var(--light-pink);
		}
		.crossword-cell {
			min-width: 40px;
			height: 40px;
			border-radius: 2px;
		}
		#crossword-words {
			width: 100%;
			columns: 80px 2;
			padding: 1em;
			margin-bottom: 1.3em;
			-webkit-column-break-inside: avoid;
			page-break-inside: avoid;
			break-inside: avoid;
		}
		.crossword-word-col {
			line-height: 90%;
		}
		.found-word{
			color: var(--error-red);
			text-decoration: line-through;
		}
		.crossword-complete {
			animation: fadeIn 3s;
			margin: 30% auto 0;
			font-size: 2.5em;
			font-weight: bold;
			color: var(--dark-red);
			position: absolute;
			width: 55%;
		}
		#table-complete{
			margin: 0px auto 20px;
			text-align: center;
			background-color: var(--white);
			border-radius: 5px;
			opacity: 0.1;
			animation: fadeOut 2.5s;
		}
		@keyframes fadeIn{
			from{
				opacity: 0;
			}
			to{
				opacity: 1;
				display: none;
			}
		}
		@keyframes fadeOut{
			0% {
				opacity: 1;
			}
			100% {
				opacity: 0.1;
			}
		}
	</style>
{% endblock %}

{% block customjs %}
<script type="text/javascript">
"use strict";

const words = `ALL FOR ONE
ALL MIGHT`.split("\n").map(line => line.replace(/ /g, ""));

let matrix = `M X A R O K R I M T X O K N K G S Q R Y Y N T
H W K D Q M L Y P W C O A S U R B F J L R H M
T I U A Z D I D F E S Q L S R P B R R P G F T
L V M I D N I G H T N Y L O O X P E S R M S H
J T A H Y R D F Q V B Y F T G Q B M E E H K G
X R M J H A L Y H H J L O N I G C H G S F W I
I Z V L F O C M O Z Q R R E R U P D I E U A M
B E S T J E A N I S T N O M I P B S D N R H L
B F R O R O G E K B N H N E U C F Y V T C N L
N O I T T M E R I B N Z E C W G E W H M O N A
V Z K A Z Q B I M R C O M P R E S S U I N K O
B G N I K A R A G I H S A R U M O T Q C D F G
D A B I V C Q S W A W U V F Y I H H I T U H F
I B N M W R W K E S D S M R O V A E D N E B R
I W D A E H R E S A R E Q N U O H U D A Z M S
L I R Y U K Y U P Z D K Q L U X R J U X A B U`.split("\n").map(line => line.split(" "));

const rows = matrix.length;
const cols = matrix[0].length;

let found = [];

let click = false;

function start() {
	let max = Math.max(rows, cols);
	let size = 40 * 10 / max + "px";
	let fontsize = (10 / max)**(1/2) + "em";
	let mytablebody = document.getElementById("crossword-table");

	for(let i = 0; i < rows; i++) {
		let mycurrent_row = document.createElement("tr");

		for(let j = 0; j < cols; j++) {
			let mycurrent_cell = document.createElement("td");
			mycurrent_cell.classList.add("crossword-cell");
			mycurrent_cell.setAttribute("id", `crossword-cell-${i}-${j}`);
			mycurrent_cell.setAttribute("data-posI", i);
			mycurrent_cell.setAttribute("data-posJ", j);
			mycurrent_cell.style.width = size;
			mycurrent_cell.style.minWidth = size;
			mycurrent_cell.style.height = size;
			mycurrent_cell.style.maxHeight = size;
			mycurrent_cell.style.fontSize = fontsize;
			let currenttext = document.createTextNode(matrix[i][j]);
			mycurrent_cell.addEventListener("click", function( event){
				if(click){
					const start = click;
					const final = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
					click = false;
					if(start[0] === final[0] && start[1] === final[1])return; //same position
					if(start[0] === final[0] || start[1] === final[1] || (Math.abs(start[0] - final[0]) === Math.abs(start[1] - final[1]))){
						let word = "";
						let offsets = [Math.sign(final[0] - start[0]), Math.sign(final[1] - start[1])];
						for(let [i, j] = start; (i !== final[0] || j !== final[1]); [i += offsets[0], j += offsets[1]]){
							word += matrix[i][j];
						}
						word += matrix[final[0]][final[1]];
						console.log(word);
						if(words.includes(word) && !found.includes(word)){
							found.push(word);
							document.getElementById(`crossword-word-${word.toLowerCase()}`).classList.add("found-word");
							if(words.length === found.length){
								mytablebody.id = "table-complete";
								setTimeout(function(){
									document.getElementById(`crossword`).innerHTML = `<div class="crossword-complete">Completed!</div>`;
								},3000);
							}
						}
					}
					return;//invalid
				}
				else{
					click = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
				}
			},false);
			mycurrent_cell.addEventListener("mouseover", function( event ) {
				if(click){
					const start = click;
					const final = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
					if(start[0] === final[0] && start[1] === final[1])return; //same position
					if(start[0] === final[0] || start[1] === final[1] || (Math.abs(start[0] - final[0]) === Math.abs(start[1] - final[1]))){
						let offsets = [Math.sign(final[0] - start[0]), Math.sign(final[1] - start[1])];
						for(let [i, j] = start; (i !== final[0] + offsets[0] || j !== final[1] + offsets[1]); [i += offsets[0], j += offsets[1]]){
							let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
							tempCell.classList.add("crosswordCellS");
						}
					}
				}
				event.target.classList.add("crosswordCellH");
			}, false);
			mycurrent_cell.addEventListener("mouseleave", function( event ) {
				for(let i = 0; i < rows; i++){
					for(let j = 0; j < cols; j++){
						let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
						tempCell.classList.remove("crosswordCellH");
						tempCell.classList.remove("crosswordCellS");
					}
				}
			}, false);
			mycurrent_cell.appendChild(currenttext);
			mycurrent_row.appendChild(mycurrent_cell);
		}
		mytablebody.appendChild(mycurrent_row);
	}

	let colnum = Math.ceil(words.length / 5);
	let wordArea = document.getElementById("crossword-words");
	let tempWords = words.map(word => `<div id="crossword-word-${word.toLowerCase()}">${word}</div>`);
	wordArea.innerHTML = tempWords.join("<br/>");

}

window.onload = start;
</script>
{%endblock%}