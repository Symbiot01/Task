{% extends "_newsletter.njk" %}

{% set pagetitle = 'August - Issue 1' %}

{% set pagecount = 4 %}

{% block coverpage %}
	<div class="page" id="cover-page"></div>
{% endblock %}

{% block article %}
	<div class="page">
		<div class="article-full">
			<h2>The Philosophy of Attack on Titan [SPOILER]</h2>
			<br/>
			<div class="article-author">By: Anmol Kumar</div>
			<div class="article-content spoiler">
				<p>Created by Hajime Isayama, the story of Shingeki no Kyojin ( Japanese: <span style="font-size:0.8em">進撃の巨人</span>) is well beyond the plot that gets played out throughout the timeline. The series revolves around a world which is surrounded by massive walls with the entirety of humanity inside it, as outside the walls there roam giant human-devouring titans which nearly wiped out the human population a hundred years ago.</p>
				<p>From just the beginning of the story, we sense a feeling of wanting to have freedom - freedom from those titans and wanting to live a life outside the confining walls. Another theme which is instilled into the minds of the readers is fear. Fear plays a vital role throughout the convoluting plot as the titan fighting soldiers and even the civilians have a constant feeling of fear, that they don’t end up getting eaten by those titans. Several important characters like Eren, Reiner and Zeke come into the picture gradually and their character development is also beautifully portrayed. As the story continues and we get to know about the Marleyans and Eldians and the strife between the two races and the long gruesome history behind it, the actual theme of AoT shines out.</p>
				<p>We come to know about how Reiner and his comrades, along with the entire Eldian population living in Marley, were indoctrinated against their own race. They were made to think of their whole existence as pathetic and spiteful, and that the only way to repent for their sin of being born was to kill their own kind, who lived on an island. The hatred towards the Eldians was so appalling that they called the island the Demon Island. The concept of indoctrination of children to raise them as potential war weapons isn’t new, but the characters of Reiner, Bertholdt and Annie are what makes the cruel ploy even more depressing. They manage to befriend their main target, Eren, but get carried away faking their friendliness.</p>
				<p>Four years later when Eren pays Reiner a visit in Marley, the shocked Reiner immediately realizes that Eren must’ve been there to take revenge for his mother. Eren tells him that he is just like Reiner but every word said by Eren comes as a bullet for Reiner. He now completely sees himself in the position Eren was nine years ago. But Eren didn’t have answers for what had happened back then, nor did he see it coming. Unfortunately enough, this made the situation even more miserable for Reiner and he breaks down into tears. Eren however has witnessed suffering in his own path and isn’t deterred from his goal.</p>
				<p>One of the other main elements in the later half of the story is about defining correctness in one’s actions and behavior. The infamous scene where Eren obliterated Armin, his own childhood friend, and drove Mikasa to the point of crying in despair, defined his whole new character. Eren now believed in his own definition of freedom, which according to him, Mikasa and Armin never possessed. While people began to doubt Eren’s intentions when he killed thousands of unarmed men during the eve of the Declaration of War, this scene had particularly made it clear that Eren had his own plans. The ending arcs had made it clear that Eren had developed into a completely different man, with his own philosophy and outlook towards people and his friends, as compared to what he was in his childhood.</p>
				<p>The beauty of AoT lies in the fact that the underlying themes keep the plot on the surface carefully tied up and flowing. The philosophical concepts of defining one’s own interpretation of things based on their experience, is very crucial in understanding the true meaning of the story. We can surely say that Isayama successfully manages to blend in together some very realistic themes in this fictional story and it manages to provide for a complete package combined with the gripping plot.</p>
				<div class="article-end"></div>
			</div>
		</div>
	</div>
	<div class="page">
		<div class="article-full">
			<h2>Recommendation: Tower of God</h2>
			<br/>
			<div class="article-author">By: Sarthak Vijaywat</div>
			<table class="anime-info">
				<tr><td>Anime</td><td>Tower of God (Kami no Tou)</td></tr>
				<tr><td>Episodes</td><td>13</td></tr>
				<tr><td>Genres</td><td>Action, Dark Fantasy</td></tr>
			</table>
			<div class="article-content">
				<p>Tower of God is a Korean anime which is the adaptation of a very popular webtoon/manhwa by the same name. It follows the story of a kid named “Twenty-Fifth Bam”, who follows a girl named Rachel, even after she abandons him to enter the Tower of God.</p>
				<p>Surprisingly enough, that single line explains the story quite efficiently! ;) The backstory of the protagonist (whose name is shortened to ‘Bam’) is not very clear, but he is alone in a dark place for a long time before a girl named Rachel frees him. She teaches him a lot about the outside world and slowly becomes the world to him. But one day she abandons him to enter the “Tower of God” - a place where any wishes you have are fulfilled if you reach the top . The devastated Bam decides to follow her and begins his own journey through the Tower, starting an adventure full of determination, betrayal, and treachery.</p>
				<img src="/assets/releases/2021-08-1/1.webp" alt="Tower of God" style="width: 90%;margin:10px"/>
				<p>The animation isn’t mind-blowing since they tried to depict the characters the way they’re shown in the initial chapters of the manhwa, but if they announce the season 2 of this anime then the audience is in for a pleasant surprise as the artwork improves a lot after this story arc. Apart from animation, its music stands out and is appreciated around the world. The pacing of the story, on the other hand, is rather fast, and sometimes fast enough to make it hard to follow the story.</p>
				<p>If you’re looking for a one-season action flick then I’d definitely recommend Tower of God. It is dubbed in English and Japanese in addition to its original Korean language, and is available on Crunchyroll and Netflix in a couple countries.</p>
				<div class="article-end"></div>
			</div>
		</div>
	</div>
	<div class="page" id="wordsearch">
		<table id="wordsearch-table" cellspacing="0"></table>
		<div id="wordsearch-words"></div>
	</div>
	<div class="page" id="crossword">
		<table class="crossword-table" id="crossword-table" cellspacing="0"></table>
		<div id="crossword-words">
			<div id="crossword-left"></div>
			<div id="crossword-right"></div>
		</div>
	</div>
{% endblock %}

{% block prescript %}
	<script>
		const solMatrix = [
			['-', '-', '-', 'B', '-', '-', '-', 'B', '-', '-', '-', '-', '-', '-', '-'],
			['F', 'I', 'V', 'E', '-', '-', '-', 'L', '-', 'G', 'Y', 'O', 'M', 'E', 'I'],
			['-', '-', '-', 'A', 'K', 'A', 'Z', 'A', '-', '-', '-', '-', 'U', '-', '-'],
			['-', '-', '-', 'S', '-', '-', '-', 'C', '-', '-', 'S', '-', 'Z', '-', '-'],
			['-', '-', '-', 'T', '-', '-', '-', 'K', 'A', 'G', 'A', 'Y', 'A', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'N', '-', 'N', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'E', '-', '-', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', 'K', '-', '-', 'M', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'S', 'A', 'K', 'O', 'N', 'J', 'I', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'P', '-', '-', 'C', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'A', '-', '-', 'H', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'R', '-', '-', 'O', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'O', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
		];
		const crossMatrix = solMatrix.map(row => row.map(cell => cell === '-' ? cell : ' '));

		const letterSpaces = [];

		(() => {
			const maxDimension = Math.max(crossMatrix.length, crossMatrix[0].length);
			const root = document.querySelector(':root');
			root.style.setProperty('--crossword-cell-size', (40 * 10 / maxDimension - 4) + "px");
			root.style.setProperty('--crossword-font-size', (10 / maxDimension) ** (1 / 2) + "em");
			crossMatrix.forEach((row, i) => {
				row.forEach((char, j) => {
					if (char === ' ') letterSpaces.push([i, j]);
				});
			});
		})();
	</script>
{% endblock %}

{% block letterjs %}
	<script type="text/javascript">
		"use strict";

		const tempWords = `ALL FOR ONE\nALL MIGHT\nBEST JEANIST\nCEMENTOSS\nDABI\nENDEAVOR\nERASER HEAD\nHAWKS\nKUROGIRI\nMIDNIGHT\nMIRKO\nMR COMPRESS\nPRESENT MIC\nRYUKYU\nTOMURA SHIGARAKI`.split("\n").map(word => word.replace(/\t/g, '')), words = tempWords.map(word => word.replace(/[ ]/g, '').toUpperCase());

		let wordMatrix = `M X A R O K R I M T X O K N K G S Q R Y Y N T
		H W K D Q M L Y P W C O A S U R B F J L R H M
		T I U A Z D I D F E S Q L S R P B R R P G F T
		L V M I D N I G H T N Y L O O X P E S R M S H
		J T A H Y R D F Q V B Y F T G Q B M E E H K G
		X R M J H A L Y H H J L O N I G C H G S F W I
		I Z V L F O C M O Z Q R R E R U P D I E U A M
		B E S T J E A N I S T N O M I P B S D N R H L
		B F R O R O G E K B N H N E U C F Y V T C N L
		N O I T T M E R I B N Z E C W G E W H M O N A
		V Z K A Z Q B I M R C O M P R E S S U I N K O
		B G N I K A R A G I H S A R U M O T Q C D F G
		D A B I V C Q S W A W U V F Y I H H I T U H F
		I B N M W R W K E S D S M R O V A E D N E B R
		I W D A E H R E S A R E Q N U O H U D A Z M S
		L I R Y U K Y U P Z D K Q L U X R J U X A B U`.replace(/\t/g, '').split("\n").map(line => line.split(" "));

		const wordRows = wordMatrix.length;
		const wordCols = wordMatrix[0].length;

		let wordFound = [];

		let wordClick = false;

		function startWord () {
			let max = Math.max(wordRows, wordCols);
			let size = 40 * 10 / max - 3 + "px";
			let fontsize = (10 / max) ** (1 / 2) + "em";
			let mytablebody = document.getElementById("wordsearch-table");

			for (let i = 0; i < wordRows; i++) {
				let mycurrent_row = document.createElement("tr");

				for (let j = 0; j < wordCols; j++) {
					let mycurrent_cell = document.createElement("td");
					mycurrent_cell.classList.add("wordsearch-cell");
					mycurrent_cell.setAttribute("id", `wordsearch-cell-${i}-${j}`);
					mycurrent_cell.setAttribute("data-posI", i);
					mycurrent_cell.setAttribute("data-posJ", j);
					mycurrent_cell.style.width = size;
					mycurrent_cell.style.minWidth = size;
					mycurrent_cell.style.height = size;
					mycurrent_cell.style.maxHeight = size;
					mycurrent_cell.style.fontSize = fontsize;
					let currenttext = document.createTextNode(wordMatrix[i][j]);
					mycurrent_cell.addEventListener("click", function (event) {
						if (wordClick) {
							const start = wordClick;
							const final = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
							wordClick = false;
							if (start[0] === final[0] && start[1] === final[1]) return; //same position
							if (start[0] === final[0] || start[1] === final[1] || (Math.abs(start[0] - final[0]) === Math.abs(start[1] - final[1]))) {
								let word = "";
								let offsets = [Math.sign(final[0] - start[0]), Math.sign(final[1] - start[1])];
								for (let [i, j] = start; (i !== final[0] || j !== final[1]); [i += offsets[0], j += offsets[1]]) word += wordMatrix[i][j];
								word += wordMatrix[final[0]][final[1]];
								console.log(word);
								if (words.includes(word) && !wordFound.includes(word)) {
									wordFound.push(word);
									document.getElementById(`wordsearch-word-${word.toLowerCase()}`).classList.add("found-word");
									if (words.length === wordFound.length) {
										mytablebody.id = "table-complete";
										const wordsList = document.getElementById('wordsearch-words');
										wordsList.style.animation = "fadeOut 1.5s";
										wordsList.style.opacity = 0.1;
										setTimeout(function () {
											document.getElementById(`wordsearch`).innerHTML = `<div class="wordsearch-complete">Completed!</div>`;
										}, 1500);
									}
								}
							}
							return; // invalid
						}
						else {
							wordClick = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
						}
					}, false);
					mycurrent_cell.addEventListener("mouseover", function (event) {
						if (wordClick) {
							const start = wordClick;
							const final = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
							if (start[0] === final[0] && start[1] === final[1]) return; //same position
							if (start[0] === final[0] || start[1] === final[1] || (Math.abs(start[0] - final[0]) === Math.abs(start[1] - final[1]))) {
								let offsets = [Math.sign(final[0] - start[0]), Math.sign(final[1] - start[1])];
								for (let [i, j] = start; (i !== final[0] + offsets[0] || j !== final[1] + offsets[1]); [i += offsets[0], j += offsets[1]]) {
									let tempCell = document.getElementById(`wordsearch-cell-${i}-${j}`);
									tempCell.classList.add("wordsearchCellS");
								}
							}
						}
						event.target.classList.add("wordsearchCellH");
					}, false);
					mycurrent_cell.addEventListener("mouseleave", function (event) {
						for (let i = 0; i < wordRows; i++) {
							for (let j = 0; j < wordCols; j++) {
								let tempCell = document.getElementById(`wordsearch-cell-${i}-${j}`);
								tempCell.classList.remove("wordsearchCellH");
								tempCell.classList.remove("wordsearchCellS");
							}
						}
					}, false);
					mycurrent_cell.appendChild(currenttext);
					mycurrent_row.appendChild(mycurrent_cell);
				}
				mytablebody.appendChild(mycurrent_row);
			}

			let colnum = Math.ceil(words.length / 5);
			let wordArea = document.getElementById("wordsearch-words");
			wordArea.innerHTML = tempWords.map(word => `<div id="wordsearch-word-${word.replace(/[ \t]/g, '').toLowerCase()}" class="wordsearch-word">${word}</div>`).join("");
		}
	</script>
	<script>
		"use strict";

		const crossRows = crossMatrix.length;
		const crossCols = crossMatrix[0].length;

		const crossFound = crossMatrix.map(row => row.map(() => '-'));

		let crossClick = false;
		let crossDir = false; // 1234 NESW
		let crosswordVis = false;

		function startCross () {
			let mytablebody = document.getElementById("crossword-table");

			for (let i = 0; i < crossRows; i++) {
				let mycurrent_row = document.createElement("tr");

				for (let j = 0; j < crossCols; j++) {
					let mycurrent_cell = document.createElement("td");
					if (crossMatrix[i][j] === "-") {
						mycurrent_cell.classList.add("crossword-cell-blank");
						mycurrent_cell.setAttribute("data-cell", "");
					} else {
						mycurrent_cell.classList.add("crossword-cell");
						mycurrent_cell.setAttribute("data-cell", "1");
						if (((!i || crossMatrix[i - 1][j] === '-') && crossMatrix[i + 1][j] !== '-') || ((!j || crossMatrix[i][j - 1] === '-') && crossMatrix[i][j + 1] !== '-')) {
							mycurrent_cell.classList.add('crossword-count');
						}
					}
					mycurrent_cell.setAttribute("id", `crossword-cell-${i}-${j}`);
					mycurrent_cell.setAttribute("data-posI", i);
					mycurrent_cell.setAttribute("data-posJ", j);
					mycurrent_cell.addEventListener("click", function (event) {
						for (let i = 0; i < crossRows; i++) {
							for (let j = 0; j < crossCols; j++) {
								let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
								tempCell.classList.remove("crosswordCellH");
								tempCell.classList.remove("crosswordCellS");
							}
						}
						crossClick = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
						if (crossMatrix[crossClick[0]][crossClick[1]] === "-") crossClick = false;
						else event.target.classList.add("crosswordCellH");
					}, false);
					mycurrent_row.appendChild(mycurrent_cell);
				}
				mytablebody.appendChild(mycurrent_row);
			}
			document.addEventListener('keydown', function (e) {
				if (!crosswordVis) return;
				if (crossClick) {
					if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 122)) {
						let tempCell = document.getElementById(`crossword-cell-${crossClick[0]}-${crossClick[1]}`);
						let currenttext = String.fromCharCode(e.keyCode).toUpperCase();
						tempCell.innerHTML = currenttext;
						crossFound[crossClick[0]][crossClick[1]] = currenttext;
						// check if crossword is completed
						if (!letterSpaces.find(([i, j]) => crossFound[i][j] === '-')) {
							const xios = {
								post: function (_, info) {
									return new Promise((resolve, reject) => resolve({
										data: info.join('|') === solMatrix.join('|') ? 'solved' : ''
									}));
								}
							} // Don't kill me
							xios.post(`/checker/2021-08-1`, crossFound).then(res => {
								if (res.data) {
									mytablebody.classList.add("table-complete-cross");
									setTimeout(function () {
										document.getElementById(`crossword`).innerHTML = `<div class="crossword-complete">Completed!</div>`;
									}, 1600);
								}
							}).catch(err => console.log(err));
						}
						const nexts = [];
						(() => {
							const a = crossClick;
							nexts.push({ c: [a[0] + 1, a[1]], d: 3 });
							nexts.push({ c: [a[0], a[1] + 1], d: 2 });
							if (crossDir) {
								const o = [null, [-1, 0], [0, 1], [1, 0], [0, -1]][crossDir];
								nexts.unshift({ c: [a[0] + o[0], a[1] + o[1]], d: crossDir });
							}
						})();
						return nexts.find(coords => {
							const cell = document.getElementById(`crossword-cell-${coords.c[0]}-${coords.c[1]}`);
							if (cell && cell.getAttribute("data-cell")) {
								crossClick = coords.c;
								crossDir = coords.d;
								for (let i = 0; i < crossRows; i++) {
									for (let j = 0; j < crossCols; j++) {
										let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
										tempCell.classList.remove("crosswordCellH");
										tempCell.classList.remove("crosswordCellS");
									}
								}
								cell.classList.add('crosswordCellH');
								return true;
							}
						});
					}
					if (e.keyCode >= 37 && e.keyCode <= 40) {
						const offsets = {
							'37': [0, -1],
							'38': [-1, 0],
							'39': [0, +1],
							'40': [+1, 0]
						}, keyDir = {
							'37': 4,
							'38': 1,
							'39': 2,
							'40': 3
						};
						e.preventDefault();
						const next = document.getElementById(`crossword-cell-${crossClick[0] + offsets[e.keyCode][0]}-${crossClick[1] + offsets[e.keyCode][1]}`);
						if (next && next.getAttribute("data-cell")) {
							crossClick[0] += offsets[e.keyCode][0];
							crossClick[1] += offsets[e.keyCode][1];
							for (let i = 0; i < crossRows; i++) {
								for (let j = 0; j < crossCols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							crossDir = keyDir[e.keyCode];
							return;
						}
					}
					if ([8, 46].includes(e.keyCode)) {
						document.getElementById(`crossword-cell-${crossClick[0]}-${crossClick[1]}`).innerHTML = '';
						crossFound[crossClick[0]][crossClick[1]] = '-';
					}
				}
			});
			new IntersectionObserver(([crossword]) => {
				if (crossword.isIntersecting && crossword.intersectionRatio > 0.8) {
					crosswordVis = true;
				} else {
					crosswordVis = false;
				}
			}, { threshold: [0.99] }).observe(document.getElementById('crossword-table'));

			const clues = [];
			clues.push(`3. No. of siblings that Tanjiro has
			4. Name of stone Hashira (Pillar)
			6. Name of Upper Moon Three
			8. Current leader of Demon Slayer Corps
			10. Former water Hashira (Pillar)`.replace(/\t/g, '').split('\n').map(line => line.split(/\. (.*)/)));
			clues.push(`1. Breathing style that Inosuke uses
			2. Colour of Tanjiro's nichirin blade
			5. First demon ever
			7. Hashira with green nichirin blade
			9. Last name of Shinobu
			10. Type of bird that Zenitsu has`.replace(/\t/g, '').split('\n').map(line => line.split(/\. (.*)/)));

			document.getElementById('crossword-left').innerHTML = `<h3>Across</h3><br/><table class="cross-words">${clues[0].map(clue => `<tr><td>${clue[0]}</td><td>${clue[1]}</td></tr>`).join('')}</table>`;
			document.getElementById('crossword-right').innerHTML = `<h3>Down</h3><br/><table class="cross-words">${clues[1].map(clue => `<tr><td>${clue[0]}</td><td>${clue[1]}</td></tr>`).join('')}</table>`;
		}
	</script>
	<script>
		window.onload = () => {
			startWord();
			startCross();
		}
	</script>
{% endblock %}

{% block lettercss %}
	<style>
		:root {
			--navy        : #0e1b45;
			--deep-purple : #392352;
			--wine        : #f73f75;
			--violet      : #7c2f64;
			--pink        : #f04dc8;
			--purple      : #c03ebb;
		}
		.page {
			color: var(--deep-purple);
		}
		#cover-page {
			background-image: url(/assets/releases/2021-08-1/cover.webp);
			background-position: center;
			background-size: cover;
		}
		.article-full, .article-half, #crossword-left, #crossword-right {
			scrollbar-color: var(--purple) var(--off-white) !important;
		}
		.article-full > h2, .article-half > h2 {
			text-shadow: 0 0 0.5px var(--purple);
		}
		.article-end {
			background-color: var(--purple);
		}
		.crosswordCellH {
			background-color: var(--purple) !important;
		}
		.wordsearchCellS {
			background-color: var(--wine) !important;
		}
		.found-word {
			color: var(--wine) !important;
		}
		.wordsearch-complete, .crossword-complete {
			color: var(--wine) !important;
		}
	</style>
	<link rel="stylesheet" type="text/css" href="/assets/styles/wordsearch.css"/>
	<link rel="stylesheet" type="text/css" href="/assets/styles/crossword.css"/>
{% endblock %}

{% set scripts = ['https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'] %}