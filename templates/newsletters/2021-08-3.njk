{% extends "_newsletter.njk" %}

{% set pagetitle = 'August - Issue 1' %}

{% set pagecount = 2 %}

{% block article %}
	<div class="page" id="crossword">
		<table id="crossword-table" cellspacing="0"></table>
		<div id="crossword-words">
			<div id="crossword-left"></div>
			<div id="crossword-right"></div>
		</div>
	</div>
	<div class="page">New page!</div>
{% endblock %}

{% block lettercss %}
	<style>
		#crossword-table {
			margin: 0px auto 20px;
			text-align: center;
			background-color: var(--white);
			border-radius: 5px;
		}
		#crossword-table > tr > td {
			width: var(--crossword-cell-size);
			min-width: var(--crossword-cell-size);
			height: var(--crossword-cell-size);
			max-height: var(--crossword-cell-size);
			font-size: var(--crossword-font-size);
		}
		.crosswordCellH {
			background-color: var(--light-gray);
		}
		.crosswordCellS {
			background-color: var(--light-pink);
		}
		.crossword-cell-blank {
			background-color: var(--dark-gray);
		}
		.crossword-cell {
			min-width: 38px;
			height: 38px;
			border: 1px solid var(--abyss);
		}
		#crossword-words {
			width: 100%;
			columns: 80px 2;
			padding: 1em;
			margin-bottom: 1.3em;
			-webkit-column-break-inside: avoid;
			page-break-inside: avoid;
			break-inside: avoid;
		}
		.crossword-word-col {
			line-height: 90%;
		}
		.found-word {
			color: var(--error-red);
			text-decoration: line-through;
		}
		.crossword-complete {
			animation: fadeIn 3s;
			margin: 30% auto 0;
			font-size: 2.5em;
			font-weight: bold;
			color: var(--dark-red);
			width: 55%;
		}
		.table-complete {
			opacity: 0.1;
			animation: fadeOut 2.5s;
		}
		@keyframes fadeIn {
			from {
				opacity: 0;
			}
			to {
				opacity: 1;
				display: none;
			}
		}
		@keyframes fadeOut {
			0% {
				opacity: 1;
			}
			100% {
				opacity: 0.1;
			}
		}
		td input {
			background-color: var(--white);
			width: 75%;
			border-radius: 0px;
		}
	</style>
{% endblock %}

{% set scripts = ['https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'] %}

{% block prescript %}
	<script>
		// const solMatrix = [
		// 	['-', '-', '-', 'B', '-', '-', '-', 'B', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', 'E', '-', '-', '-', 'L', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', 'A', 'K', 'A', 'Z', 'A', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', 'S', '-', '-', '-', 'C', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', 'T', '-', '-', '-', 'K', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
		// 	['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
		// ];
		const solMatrix = [
			['-', '-', '-', 'B', '-', '-', '-', 'B', '-', '-', '-', '-', '-', '-', '-'],
			['F', 'I', 'V', 'E', '-', '-', '-', 'L', '-', 'G', 'Y', 'O', 'M', 'E', 'I'],
			['-', '-', '-', 'A', 'K', 'A', 'Z', 'A', '-', '-', '-', '-', 'U', '-', '-'],
			['-', '-', '-', 'S', '-', '-', '-', 'C', '-', '-', 'S', '-', 'Z', '-', '-'],
			['-', '-', '-', 'T', '-', '-', '-', 'K', 'A', 'G', 'A', 'Y', 'A', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'N', '-', 'N', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'E', '-', '-', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', 'K', '-', '-', 'M', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'S', 'A', 'K', 'O', 'N', 'J', 'I', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'P', '-', '-', 'C', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'A', '-', '-', 'H', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'R', '-', '-', 'O', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'R', '-', '-', 'U', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'O', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
		];
		const matrix = solMatrix.map(row => row.map(cell => cell === '-' ? cell : ' '));

		const letterSpaces = [];

		(() => {
			const maxDimension = Math.max(matrix.length, matrix[0].length);
			const root = document.querySelector(':root');
			root.style.setProperty('--crossword-cell-size', (40 * 10 / maxDimension - 3) + "px");
			root.style.setProperty('--crossword-font-size', (10 / maxDimension) ** (1 / 2) + "em");
			matrix.forEach((row, i) => {
				row.forEach((char, j) => {
					if (char === ' ') letterSpaces.push([i, j]);
				});
			});
		})();
	</script>
{% endblock %}

{% block letterjs %}
<script type="text/javascript">
"use strict";

const rows = matrix.length;
const cols = matrix[0].length;

const found = matrix.map(row => row.map(() => '-'));

let click = false;
let keypressed = false;

function start() {
	let mytablebody = document.getElementById("crossword-table");

	for (let i = 0; i < rows; i++) {
		let mycurrent_row = document.createElement("tr");

		for (let j = 0; j < cols; j++) {
			let mycurrent_cell = document.createElement("td");
			if (matrix[i][j] === "-") {
				mycurrent_cell.classList.add("crossword-cell-blank");
				mycurrent_cell.setAttribute("Blank", "");
			}
			else {
				mycurrent_cell.classList.add("crossword-cell");
				mycurrent_cell.setAttribute("Blank", "1");
			}
			mycurrent_cell.setAttribute("id", `crossword-cell-${i}-${j}`);
			mycurrent_cell.setAttribute("data-posI", i);
			mycurrent_cell.setAttribute("data-posJ", j);
			mycurrent_cell.addEventListener("click", function (event) {
				for (let i = 0; i < rows; i++) {
					for (let j = 0; j < cols; j++) {
						let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
						tempCell.classList.remove("crosswordCellH");
						tempCell.classList.remove("crosswordCellS");
					}
				}
				click = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
				if (matrix[click[0]][click[1]] === "-") click = false;
				else event.target.classList.add("crosswordCellH");
			}, false);
			document.addEventListener('keydown', function (e) {
				if (keypressed)return;
				keypressed = true;
				if (click) {
					if (e.keyCode >= 65 && e.keyCode <= 90) {
						let tempCell = document.getElementById(`crossword-cell-${click[0]}-${click[1]}`);
						let currenttext = (String.fromCharCode(e.keyCode));
						tempCell.innerHTML = currenttext;
						found[click[0]][click[1]] = currenttext;
						// check if crossword is completed
						if (!letterSpaces.find(([i, j]) => found[i][j] === '-')) {
							const xios = {
								post: function (_, info) {
									return new Promise((resolve, reject) => resolve({
										data: info.join('|') === solMatrix.join('|') ? 'solved' : ''
									}));
								}
							} // Don't kill me
							xios.post(`/checker/2021-08-1`, found).then(res => {
								if (res.data) {
									mytablebody.classList.add("table-complete");
									setTimeout(function () {
										document.getElementById(`crossword`).innerHTML = `<div class="crossword-complete">Completed!</div>`;
									}, 1600);
								}
							}).catch(err => console.log(err));
						}
						let next = document.getElementById(`crossword-cell-${click[0] + 1}-${click[1]}`);
						if (next && next.getAttribute("Blank")) {
							click[0] += 1;
							for (let i = 0; i < rows; i++) {
								for (let j = 0; j < cols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							return;
						}
						next = document.getElementById(`crossword-cell-${click[0]}-${click[1] + 1}`);
						if (next && next.getAttribute("Blank")) {
							click[1] += 1;
							for (let i = 0; i < rows; i++) {
								for (let j = 0; j < cols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							return;
						}
					}
					if (e.keyCode >= 37 && e.keyCode <= 40) {
						e.preventDefault();
						const offsets = {
							'37': [0, -1],
							'38': [-1, 0],
							'39': [0, +1],
							'40': [+1, 0]
						}
						const next = document.getElementById(`crossword-cell-${click[0] + offsets[e.keyCode][0]}-${click[1] + offsets[e.keyCode][1]}`);
						if (next && next.getAttribute("Blank")) {
							click[0] += offsets[e.keyCode][0];
							click[1] += offsets[e.keyCode][1];
							for (let i = 0; i < rows; i++) {
								for (let j = 0; j < cols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							return;
						}
					}
					if ([8, 46].includes(e.keyCode)) {
						document.getElementById(`crossword-cell-${click[0]}-${click[1]}`).innerHTML = '';
						found[click[0]][click[1]] = '-';
					}
				}
			});
			document.addEventListener("keyup", () => keypressed = false, false);
			mycurrent_row.appendChild(mycurrent_cell);
		}
		mytablebody.appendChild(mycurrent_row);
	}

	function arraysAreIdentical(arr1, arr2) {
		for (let i = 0; i < arr1.length; i++) {
			for (let j = 0; j < arr1[0].length; j++) {
				if (arr1[i][j] !== arr2[i][j]) return false;
			}
		}
		return true;
	}

}

window.onload = start;
</script>
{% endblock %}
