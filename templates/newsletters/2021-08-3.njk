{% extends "_newsletter.njk" %}

{% set pagetitle = 'August - Issue 1' %}

{% set pagecount = 2 %}

{% block article %}
	<div class="page" id="crossword">
		<table id="crossword-table" cellspacing="0"></table>
		<div id="crossword-words">
			<div id="crossword-left"></div>
			<div id="crossword-right"></div>
		</div>
	</div>
	<div class="page">New page!</div>
{% endblock %}

{% block lettercss %}
	<style>
		#crossword-table {
			margin: 0px auto 20px;
			text-align: center;
			border-radius: 5px;
			counter-reset: crossword;
			padding: 5px;
			background-color: var(--dark-gray);
		}
		#crossword-table > tr > td {
			width: var(--crossword-cell-size);
			min-width: var(--crossword-cell-size);
			height: var(--crossword-cell-size);
			max-height: var(--crossword-cell-size);
			font-size: var(--crossword-font-size);
			background-color: var(--white);
		}
		.crosswordCellH {
			background-color: var(--error-red) !important;
		}
		.crossword-cell-blank {
			background-color: var(--dark-gray) !important;
		}
		.crossword-cell {
			min-width: 38px;
			height: 38px;
			border: 1px solid var(--abyss);
		}
		.crossword-count {
			position: relative;
			counter-increment: crossword;
		}
		.crossword-count:after {
			padding: 0px;
			font-size: 8px;
			top: 1px;
			left: 1px;
			content: counter(crossword);
			position: absolute;
		}
		#crossword-words {
			width: 100%;
			margin-bottom: 1.3em;
			-webkit-column-break-inside: avoid;
			page-break-inside: avoid;
			break-inside: avoid;
		}
		#crossword-left, #crossword-right {
			height: 140px;
			margin: auto;
			width: 45%;
			overflow-y: scroll;
			display: inline-block;
			border: 2px solid var(--light-gray);
			border-radius: 5px;
			font-size: 0.7em;
		}
		.crossword-complete {
			animation: fadeIn 3s;
			margin: 30% auto 0;
			font-size: 2.5em;
			font-weight: bold;
			color: var(--dark-red);
			width: 55%;
		}
		.table-complete {
			opacity: 0.1;
			animation: fadeOut 2.5s;
		}
		@keyframes fadeIn {
			from {
				opacity: 0;
			}
			to {
				opacity: 1;
				display: none;
			}
		}
		@keyframes fadeOut {
			0% {
				opacity: 1;
			}
			100% {
				opacity: 0.1;
			}
		}
		td input {
			background-color: var(--light-pink);
			width: 75%;
			border-radius: 0px;
		}
	</style>
{% endblock %}

{% block prescript %}
	<script>
		const solMatrix = [
			['-', '-', '-', 'B', '-', '-', '-', 'B', '-', '-', '-', '-', '-', '-', '-'],
			['F', 'I', 'V', 'E', '-', '-', '-', 'L', '-', 'G', 'Y', 'O', 'M', 'E', 'I'],
			['-', '-', '-', 'A', 'K', 'A', 'Z', 'A', '-', '-', '-', '-', 'U', '-', '-'],
			['-', '-', '-', 'S', '-', '-', '-', 'C', '-', '-', 'S', '-', 'Z', '-', '-'],
			['-', '-', '-', 'T', '-', '-', '-', 'K', 'A', 'G', 'A', 'Y', 'A', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'N', '-', 'N', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'E', '-', '-', '-', '-'],
			['-', '-', '-', '-', '-', '-', '-', 'K', '-', '-', 'M', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'S', 'A', 'K', 'O', 'N', 'J', 'I', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'P', '-', '-', 'C', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'A', '-', '-', 'H', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'R', '-', '-', 'O', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'R', '-', '-', 'U', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'O', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
			['-', '-', '-', '-', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
		];
		const matrix = solMatrix.map(row => row.map(cell => cell === '-' ? cell : ' '));

		const letterSpaces = [];

		(() => {
			const maxDimension = Math.max(matrix.length, matrix[0].length);
			const root = document.querySelector(':root');
			root.style.setProperty('--crossword-cell-size', (40 * 10 / maxDimension - 3) + "px");
			root.style.setProperty('--crossword-font-size', (10 / maxDimension) ** (1 / 2) + "em");
			matrix.forEach((row, i) => {
				row.forEach((char, j) => {
					if (char === ' ') letterSpaces.push([i, j]);
				});
			});
		})();
	</script>
{% endblock %}

{% block letterjs %}
<script type="text/javascript">
"use strict";

const rows = matrix.length;
const cols = matrix[0].length;

const found = matrix.map(row => row.map(() => '-'));

let click = false;
let keypressed = false;

function start() {
	let mytablebody = document.getElementById("crossword-table");

	for (let i = 0; i < rows; i++) {
		let mycurrent_row = document.createElement("tr");

		for (let j = 0; j < cols; j++) {
			let mycurrent_cell = document.createElement("td");
			if (matrix[i][j] === "-") {
				mycurrent_cell.classList.add("crossword-cell-blank");
				mycurrent_cell.setAttribute("Blank", "");
			} else {
				mycurrent_cell.classList.add("crossword-cell");
				mycurrent_cell.setAttribute("Blank", "1");
				if (((!i || matrix[i - 1][j] === '-') && matrix[i + 1][j] !== '-') || ((!j || matrix[i][j - 1] === '-') && matrix[i][j + 1] !== '-')) {
					mycurrent_cell.classList.add('crossword-count');
				}
			}
			mycurrent_cell.setAttribute("id", `crossword-cell-${i}-${j}`);
			mycurrent_cell.setAttribute("data-posI", i);
			mycurrent_cell.setAttribute("data-posJ", j);
			mycurrent_cell.addEventListener("click", function (event) {
				for (let i = 0; i < rows; i++) {
					for (let j = 0; j < cols; j++) {
						let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
						tempCell.classList.remove("crosswordCellH");
						tempCell.classList.remove("crosswordCellS");
					}
				}
				click = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
				if (matrix[click[0]][click[1]] === "-") click = false;
				else event.target.classList.add("crosswordCellH");
			}, false);
			document.addEventListener('keydown', function (e) {
				if (keypressed)return;
				keypressed = true;
				if (click) {
					if (e.keyCode >= 65 && e.keyCode <= 90) {
						let tempCell = document.getElementById(`crossword-cell-${click[0]}-${click[1]}`);
						let currenttext = (String.fromCharCode(e.keyCode));
						tempCell.innerHTML = currenttext;
						found[click[0]][click[1]] = currenttext;
						// check if crossword is completed
						if (!letterSpaces.find(([i, j]) => found[i][j] === '-')) {
							const xios = {
								post: function (_, info) {
									return new Promise((resolve, reject) => resolve({
										data: info.join('|') === solMatrix.join('|') ? 'solved' : ''
									}));
								}
							} // Don't kill me
							xios.post(`/checker/2021-08-1`, found).then(res => {
								if (res.data) {
									mytablebody.classList.add("table-complete");
									setTimeout(function () {
										document.getElementById(`crossword`).innerHTML = `<div class="crossword-complete">Completed!</div>`;
									}, 1600);
								}
							}).catch(err => console.log(err));
						}
						let next = document.getElementById(`crossword-cell-${click[0] + 1}-${click[1]}`);
						if (next && next.getAttribute("Blank")) {
							click[0] += 1;
							for (let i = 0; i < rows; i++) {
								for (let j = 0; j < cols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							return;
						}
						next = document.getElementById(`crossword-cell-${click[0]}-${click[1] + 1}`);
						if (next && next.getAttribute("Blank")) {
							click[1] += 1;
							for (let i = 0; i < rows; i++) {
								for (let j = 0; j < cols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							return;
						}
					}
					if (e.keyCode >= 37 && e.keyCode <= 40) {
						e.preventDefault();
						const offsets = {
							'37': [0, -1],
							'38': [-1, 0],
							'39': [0, +1],
							'40': [+1, 0]
						}
						const next = document.getElementById(`crossword-cell-${click[0] + offsets[e.keyCode][0]}-${click[1] + offsets[e.keyCode][1]}`);
						if (next && next.getAttribute("Blank")) {
							click[0] += offsets[e.keyCode][0];
							click[1] += offsets[e.keyCode][1];
							for (let i = 0; i < rows; i++) {
								for (let j = 0; j < cols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							return;
						}
					}
					if ([8, 46].includes(e.keyCode)) {
						document.getElementById(`crossword-cell-${click[0]}-${click[1]}`).innerHTML = '';
						found[click[0]][click[1]] = '-';
					}
				}
			});
			document.addEventListener("keyup", () => keypressed = false, false);
			mycurrent_row.appendChild(mycurrent_cell);
		}
		mytablebody.appendChild(mycurrent_row);
	}

	const clues = [];
	clues.push(`3. No.of siblings that Tanjiro has (excluding him)
	4. Name of stone Hashira (Pillar)
	6. Name of Upper Moon Three
	8. Current leader of Demon Slayer Corps
	10. Former water Hashira (Pillar)`.replace(/\t/g, '').split('\n').map(line => line.split('. ')));
	clues.push(`1. Breathing style that Inosuke uses
	2. Colour of Tanjiro's nichirin blade
	5. First demon ever
	7. Hashira with green nichirin blade
	9. Last name of Shinobu
	10. Type of bird that Zenitsu has`.replace(/\t/g, '').split('\n').map(line => line.split('. ')));

	document.getElementById('crossword-left').innerHTML = `<h3>Across</h3><br/><table class="cross-words">${clues[0].map(clue => `<tr><td>${clue[0]}</td><td>${clue[1]}</td></tr>`).join('')}</table>`;
	document.getElementById('crossword-right').innerHTML = `<h3>Down</h3><br/><table class="cross-words">${clues[1].map(clue => `<tr><td>${clue[0]}</td><td>${clue[1]}</td></tr>`).join('')}</table>`;
	console.log(clues);
}

window.onload = start;
</script>
{% endblock %}
