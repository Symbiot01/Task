{% extends "_newsletter.njk" %}

{% set pagetitle = 'December 2022 Issue' %}

{# {% set pagecount = 6 %} #}

{# The work here is done #}
{% block prescript %}
	<script>
		crossMatrix = [
			['-', ' ', '-', ' ', '-','-', '-', '-', '-', '-','-', '-', '-', '-', '-','-', ' ', '-', '-'],
			['-', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ','-', '-', '-', '-', ' ',' ', ' ', ' ', '-'],
			['-', ' ', '-', ' ', '-','-', '-', '-', ' ', '-','-', '-', ' ', '-', '-','-', ' ', '-', '-'],
			['-', ' ', '-', '-', ' ','-', ' ', ' ', ' ', ' ','-', '-', ' ', '-', '-','-', ' ', '-', '-'],
			['-', ' ', '-', '-', ' ','-', '-', '-', ' ', '-','-', '-', ' ', ' ', ' ',' ', ' ', ' ', ' '],
			['-', ' ', '-', ' ', ' ',' ', ' ', '-', ' ', '-','-', '-', ' ', '-', '-','-', ' ', '-', '-'],
			['-', ' ', '-', '-', ' ','-', '-', '-', ' ', '-','-', '-', ' ', ' ', ' ',' ', ' ', ' ', ' '],
			[' ', ' ', ' ', ' ', ' ',' ', '-', '-', '-', '-',' ', '-', ' ', '-', '-','-', ' ', '-', '-'],
			['-', '-', '-', '-', ' ','-', '-', '-', '-', '-',' ', '-', ' ', '-', ' ','-', '-', '-', '-'],
			['-', '-', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ','-', '-', '-', '-'],
			['-', '-', ' ', '-', ' ','-', '-', '-', '-', '-','-', '-', ' ', '-', ' ','-', '-', '-', '-'],
			['-', '-', ' ', '-', ' ','-', '-', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ','-', '-', ' ', '-'],
			['-', '-', ' ', '-', ' ','-', ' ', '-', '-', '-','-', '-', ' ', '-', ' ',' ', ' ', ' ', '-'],
			['-', ' ', ' ', ' ', ' ',' ', ' ', '-', '-', '-','-', '-', ' ', '-', ' ','-', '-', ' ', '-'],
			['-', '-', ' ', '-', ' ','-', ' ', '-', '-', ' ','-', '-', '-', '-', '-','-', '-', ' ', '-'],
			['-', '-', ' ', '-', '-','-', ' ', ' ', ' ', ' ',' ', ' ', ' ', '-', '-','-', '-', ' ', '-'],
			['-', '-', ' ', '-', '-','-', ' ', '-', '-', ' ','-', '-', '-', '-', ' ',' ', ' ', ' ', ' '],
			['-', '-', '-', '-','-', '-', '-', '-','-', ' ', '-', '-', '-', '-','-', '-', '-', '-', '-']
		];
		const letterSpaces = [];
		(() => {
				const maxDimension = Math.max(crossMatrix.length, crossMatrix[0].length);
				const root = document.querySelector(':root');
				root.style.setProperty('--crossword-cell-size', (40 * 10 / maxDimension - 4) + "px");
				root.style.setProperty('--crossword-font-size', (10 / maxDimension) ** (1 / 2) + "em");
				crossMatrix.forEach((row, i) => {
					row.forEach((char, j) => {
						if (char === ' ') letterSpaces.push([i, j]);
					});
				});
			})();
	</script>
{% endblock %}

{% block letterjs %}
	{# Clues added, added compatibility for number input.#}
	<script>
		"use strict";
		const crossRows = crossMatrix.length;
		const crossCols = crossMatrix[0].length;
		const crossFound = crossMatrix.map(row => row.map(() => '-'));
		let crossClick = false;
		let crossDir = false; // 1234 NESW
		let crosswordVis = false;
		function startCross () {
			let mytablebody = document.getElementById("crossword-table");
			for (let i = 0; i < crossRows; i++) {
				let mycurrent_row = document.createElement("tr");
				for (let j = 0; j < crossCols; j++) {
					let mycurrent_cell = document.createElement("td");
					if (crossMatrix[i][j] === "-") {
						mycurrent_cell.classList.add("crossword-cell-blank");
						mycurrent_cell.setAttribute("data-cell", "");
					} else {
						mycurrent_cell.classList.add("crossword-cell");
						mycurrent_cell.setAttribute("data-cell", "1");
						if (((!i || crossMatrix[i - 1][j] === '-') && crossMatrix[i + 1] && crossMatrix[i + 1][j] === ' ') || ((!j || crossMatrix[i][j - 1] === '-') && crossMatrix[i][j + 1] === ' ')) {
							mycurrent_cell.classList.add('crossword-count');
						}
					}
					mycurrent_cell.setAttribute("id", `crossword-cell-${i}-${j}`);
					mycurrent_cell.setAttribute("data-posI", i);
					mycurrent_cell.setAttribute("data-posJ", j);
					mycurrent_cell.addEventListener("click", function (event) {
						for (let i = 0; i < crossRows; i++) {
							for (let j = 0; j < crossCols; j++) {
								let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
								tempCell.classList.remove("crosswordCellH");
								tempCell.classList.remove("crosswordCellS");
							}
						}
						crossClick = [~~this.getAttribute("data-posI"), ~~this.getAttribute("data-posJ")];
						if (crossMatrix[crossClick[0]][crossClick[1]] === "-") crossClick = false;
						else event.target.classList.add("crosswordCellH");
					}, false);
					mycurrent_row.appendChild(mycurrent_cell);
				}
				mytablebody.appendChild(mycurrent_row);
			}
			document.addEventListener('keydown', function (e) {
				if (!crosswordVis) return;
				if (crossClick) {
					if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105)) {
						let tempCell = document.getElementById(`crossword-cell-${crossClick[0]}-${crossClick[1]}`);
						let currenttext = e.keyCode < 96 ? String.fromCharCode(e.keyCode) : e.keyCode - 96;
						tempCell.innerHTML = currenttext;
						crossFound[crossClick[0]][crossClick[1]] = currenttext;
						// check if crossword is completed
						if (!letterSpaces.find(([i, j]) => crossFound[i][j] === '-')) {
							axios.post(`/checker/2023-02-1/crossword`, crossFound).then(res => {
								if (res.data) {
									mytablebody.classList.add("table-complete-cross");
									setTimeout(function () {
										document.getElementById(`crossword`).innerHTML = `<div class="crossword-complete">Completed!</div>`;
									}, 1600);
								}
							}).catch(err => console.log(err));
						}
						const nexts = [];
						(() => {
							const a = crossClick;
							nexts.push({ c: [a[0] + 1, a[1]], d: 3 });
							nexts.push({ c: [a[0], a[1] + 1], d: 2 });
							if (crossDir) {
								const o = [null, [-1, 0], [0, 1], [1, 0], [0, -1]][crossDir];
								nexts.unshift({ c: [a[0] + o[0], a[1] + o[1]], d: crossDir });
							}
						})();
						return nexts.find(coords => {
							const cell = document.getElementById(`crossword-cell-${coords.c[0]}-${coords.c[1]}`);
							if (cell && cell.getAttribute("data-cell")) {
								crossClick = coords.c;
								crossDir = coords.d;
								for (let i = 0; i < crossRows; i++) {
									for (let j = 0; j < crossCols; j++) {
										let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
										tempCell.classList.remove("crosswordCellH");
										tempCell.classList.remove("crosswordCellS");
									}
								}
								cell.classList.add('crosswordCellH');
								return true;
							}
						});
					}
					if ((e.keyCode >= 48 && e.keyCode <= 57) && (e.keyCode >= 96 && e.keyCode <= 105)) {
						e
					}
					if (e.keyCode >= 37 && e.keyCode <= 40) {
						const offsets = {
							'37': [0, -1],
							'38': [-1, 0],
							'39': [0, +1],
							'40': [+1, 0]
						}, keyDir = {
							'37': 4,
							'38': 1,
							'39': 2,
							'40': 3
						};
						e.preventDefault();
						const next = document.getElementById(`crossword-cell-${crossClick[0] + offsets[e.keyCode][0]}-${crossClick[1] + offsets[e.keyCode][1]}`);
						if (next && next.getAttribute("data-cell")) {
							crossClick[0] += offsets[e.keyCode][0];
							crossClick[1] += offsets[e.keyCode][1];
							for (let i = 0; i < crossRows; i++) {
								for (let j = 0; j < crossCols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove("crosswordCellH");
									tempCell.classList.remove("crosswordCellS");
								}
							}
							next.classList.add("crosswordCellH");
							crossDir = keyDir[e.keyCode];
							return;
						}
					}
					if ([8, 46].includes(e.keyCode)) {
						document.getElementById(`crossword-cell-${crossClick[0]}-${crossClick[1]}`).innerHTML = '';
						crossFound[crossClick[0]][crossClick[1]] = '-';
					}
				}
			});
			new IntersectionObserver(([crossword]) => {
				if (crossword.isIntersecting && crossword.intersectionRatio > 0.8) {
					crosswordVis = true;
				} else {
					crosswordVis = false;
				}
			}, { threshold: [0.99] }).observe(document.getElementById('crossword-table'));
			const clues = [];
			clues.push(`4. <b>Gintama:</b> Zuramp janai, katsura da (9)
			6. <b>Spy X Family:</b> Biggest enemy is a stuffed penguin (4)
			9. <b>The Ancient Magus Bride:</b> Pet adopted at graveyard (4)
			10. <b>Mairamashita Iruma-Kun:</b> If you like it, then you should have put a ring on it (7)
			11. <b>Death Note:</b> Goes to a different world to eat apple (4)
			12. <b>Chainsaw Man:</b> John Wick's heart (7)
			13. <b>Noragami:</b> Sword sad about his death. (6)
			16. <b>Bleach:</b> Ichigo's 50th powerup (5, 8)
			17. <b>Tensura:</b> Gains smoother voice after upgrade (3, 5)
			20. <b>Parasyte:</b> The best right hand man (4)
			21. <b>Jujutsu Kaisen:</b> Finger Lickin' Good (6)
			23. <b>Pokemon:</b> Lost to a snivy (7)
			24. <b>Fate:</b> King Arthur was a reverse trap (5)`.replace(/\t/g, '').split('\n').map(line => line.split(/\. (.*)/)));
			clues.push(`1. <b>Kill la Kill:</b> Best Uniform (8)
			2. <b>How to keep a Mummy:</b> Cutest Mummy (3)
			3. <b>Akame Ga Kill:</b> Always hugs Tatsumi (8)
			5. <b>My Neighbour Totoro:</b> Studio's Mascot (6)
			7. <b>JoJo's Bizzare Adventure:</b> Stand capable of freezing time (4, 8)
			8. <b>Dragon Ball:</b> Allows only those with pure heart to fly on it (6, 6)
			14. <b>Made in Abyss:</b> Regular robot (3)
			15. <b>Naruto:</b> The fox of Gods, the woe of lords (6)
			16. <b>Kuroko no basket:</b> Momo's favourite puppy (7, 1)
			18. <b>Mob Psycho:</b> Cheeky religious conman (6)
			19. <b>Fairy Tail:</b> Sad cat (5)
			22. <b>Seven Deadly Sins:</b> Living garbage disposal (4)`.replace(/\t/g, '').split('\n').map(line => line.split(/\. (.*)/)));
			document.getElementById('crossword-left').innerHTML = `<h3>Across</h3><table class="cross-words">${clues[0].map(clue => `<tr><th>${clue[0]}</th><td>${clue[1]}</td></tr>`).join('')}</table>`;
			document.getElementById('crossword-right').innerHTML = `<h3>Down</h3><table class="cross-words">${clues[1].map(clue => `<tr><th>${clue[0]}</th><td>${clue[1]}</td></tr>`).join('')}</table>`;
		}
	
		window.onload = () => {
			startCross();
		}
	</script>
{% endblock %}

{% block lettercss %}
	<style>
		:root {
			--black-blue   : #121920;
			--dark-blue    : #112f3f;
			--teal         : #006280;
			--dirty-green  : #4d5843;
			--dirty-yellow : #a98135;
		}
		.page {
			color: var(--dark-blue);
		}
		#cover-page {
			background-image: url(/assets/releases/2022-12-1/cover.webp);
			background-position: center;
			background-size: contain;
			background-repeat: no-repeat;
			background-color: rgba(0, 0, 0, 0) !important;
		}
		.article-full, .article-half, #crossword-left, #crossword-right {
			scrollbar-color: var(--teal) var(--off-white) !important;
		}
		.article-full > h2, .article-half > h2, .article-header {
			text-shadow: 0 0 2px var(--teal) !important;
		}
		{# .article-end {
			background-color: var(--dirty-green);
		} #}
		.wordsearchCellS {
			background-color: var(--dirty-yellow) !important;
		}
		.found-word {
			color: var(--teal) !important;
		}
		.wordsearch-complete {
			color: var(--teal) !important;
		}
		.spoiler:before {
			color: var(--teal);
			background: var(--dirty-yellow);
		}
		.quote {
			color: var(--teal);
			{# font-size: 120%; #}
			font-style: italic;
			text-align: center;
		}
		li {
			margin: 7px 0px;
		}

		#crossword-left, #crossword-right {
			min-height: 75px !important;
			height: calc(90vh - 480px) !important;
		}

	</style>
	<link rel="stylesheet" type="text/css" href="/assets/styles/wordsearch.css"/>
	<link rel="stylesheet" type="text/css" href="/assets/styles/crossword.css"/>
{% endblock %}

